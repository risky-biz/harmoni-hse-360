using Harmoni360.Domain.Common;
using Harmoni360.Domain.Enums;

namespace Harmoni360.Domain.Entities;

public class TrainingComment : BaseEntity, IAuditableEntity
{
    public int TrainingId { get; private set; }
    public string Content { get; private set; } = string.Empty;
    public TrainingCommentType CommentType { get; private set; }
    public string AuthorName { get; private set; } = string.Empty;
    public int? AuthorId { get; private set; }
    public string AuthorRole { get; private set; } = string.Empty;
    public DateTime CommentDate { get; private set; }
    
    // Thread and Reply Information
    public int? ParentCommentId { get; private set; }
    public bool IsReply { get; private set; }
    public int ReplyCount { get; private set; } = 0;
    
    // Visibility and Access
    public bool IsPublic { get; private set; } = true; // Visible to all participants
    public bool IsInstructorOnly { get; private set; } = false; // Only visible to instructors
    public bool IsPrivateNote { get; private set; } = false; // Only visible to author and instructors
    public bool IsSystemGenerated { get; private set; } = false; // Generated by system events
    
    // Priority and Status
    public bool IsImportant { get; private set; } = false;
    public bool RequiresResponse { get; private set; } = false;
    public bool IsResolved { get; private set; } = false;
    public DateTime? ResolvedDate { get; private set; }
    public string ResolvedBy { get; private set; } = string.Empty;
    
    // Indonesian Compliance and Context
    public bool IsComplianceNote { get; private set; } = false;
    public string RegulatoryContext { get; private set; } = string.Empty; // K3, BPJS, Ministry regulation context
    public bool IsK3Related { get; private set; } = false;
    public string K3IssueType { get; private set; } = string.Empty; // Safety concern, procedure violation, etc.
    
    // Feedback and Rating Context
    public decimal? RelatedRating { get; private set; } // If comment is related to a rating
    public string FeedbackCategory { get; private set; } = string.Empty; // Course content, instructor, facility, etc.
    public bool IsAnonymous { get; private set; } = false;
    
    // Attachments and References
    public string AttachmentPath { get; private set; } = string.Empty;
    public string ReferencedDocuments { get; private set; } = string.Empty;
    public string Tags { get; private set; } = string.Empty; // Comma-separated tags for categorization
    
    // Moderation and Management
    public bool IsModerated { get; private set; } = false;
    public bool IsApproved { get; private set; } = true; // Default to approved unless moderation is required
    public string ModeratedBy { get; private set; } = string.Empty;
    public DateTime? ModerationDate { get; private set; }
    public string ModerationNotes { get; private set; } = string.Empty;
    
    // Edit History
    public bool IsEdited { get; private set; } = false;
    public DateTime? LastEditedDate { get; private set; }
    public string EditReason { get; private set; } = string.Empty;
    public int EditCount { get; private set; } = 0;
    
    // Engagement
    public int LikeCount { get; private set; } = 0;
    public bool IsPinned { get; private set; } = false;
    public DateTime? PinnedDate { get; private set; }
    public string PinnedBy { get; private set; } = string.Empty;
    
    // Navigation Properties
    public Training? Training { get; set; }
    public TrainingComment? ParentComment { get; set; }
    
    // Audit Fields
    public DateTime CreatedAt { get; set; }
    public string CreatedBy { get; set; } = string.Empty;
    public DateTime? LastModifiedAt { get; set; }
    public string? LastModifiedBy { get; set; }

    private TrainingComment() { } // For EF Core

    public static TrainingComment Create(
        int trainingId,
        string content,
        TrainingCommentType commentType,
        string authorName,
        int? authorId = null,
        string authorRole = "",
        bool isPublic = true)
    {
        return new TrainingComment
        {
            TrainingId = trainingId,
            Content = content,
            CommentType = commentType,
            AuthorName = authorName,
            AuthorId = authorId,
            AuthorRole = authorRole,
            CommentDate = DateTime.UtcNow,
            IsPublic = isPublic,
            IsReply = false,
            IsApproved = true, // Default to approved
            CreatedAt = DateTime.UtcNow
        };
    }

    public static TrainingComment CreateReply(
        int trainingId,
        int parentCommentId,
        string content,
        string authorName,
        int? authorId = null,
        string authorRole = "")
    {
        return new TrainingComment
        {
            TrainingId = trainingId,
            ParentCommentId = parentCommentId,
            Content = content,
            CommentType = TrainingCommentType.General,
            AuthorName = authorName,
            AuthorId = authorId,
            AuthorRole = authorRole,
            CommentDate = DateTime.UtcNow,
            IsReply = true,
            IsPublic = true,
            IsApproved = true,
            CreatedAt = DateTime.UtcNow
        };
    }

    public static TrainingComment CreateSystemComment(
        int trainingId,
        string content,
        TrainingCommentType commentType = TrainingCommentType.AdminNote)
    {
        return new TrainingComment
        {
            TrainingId = trainingId,
            Content = content,
            CommentType = commentType,
            AuthorName = "System",
            AuthorRole = "System",
            CommentDate = DateTime.UtcNow,
            IsSystemGenerated = true,
            IsPublic = true,
            IsApproved = true,
            CreatedAt = DateTime.UtcNow
        };
    }

    public void UpdateContent(string newContent, string editReason = "")
    {
        if (IsSystemGenerated)
            throw new InvalidOperationException("System-generated comments cannot be edited.");

        Content = newContent;
        IsEdited = true;
        LastEditedDate = DateTime.UtcNow;
        EditReason = editReason;
        EditCount++;
    }

    public void SetVisibility(bool isPublic, bool isInstructorOnly, bool isPrivateNote)
    {
        if (isPublic && (isInstructorOnly || isPrivateNote))
            throw new ArgumentException("Comment cannot be public and restricted at the same time.");

        if (isInstructorOnly && isPrivateNote)
            throw new ArgumentException("Comment cannot be both instructor-only and private note.");

        IsPublic = isPublic;
        IsInstructorOnly = isInstructorOnly;
        IsPrivateNote = isPrivateNote;
    }

    public void MarkAsImportant(bool requiresResponse = false)
    {
        IsImportant = true;
        RequiresResponse = requiresResponse;
    }

    public void MarkAsResolved(string resolvedBy, string resolutionNotes = "")
    {
        if (!RequiresResponse)
            throw new InvalidOperationException("Only comments requiring response can be marked as resolved.");

        IsResolved = true;
        ResolvedDate = DateTime.UtcNow;
        ResolvedBy = resolvedBy;
        
        if (!string.IsNullOrEmpty(resolutionNotes))
        {
            Content += $"\n\n[RESOLVED by {resolvedBy}]: {resolutionNotes}";
        }
    }

    public void ReopenComment(string reopenedBy, string reason = "")
    {
        if (!IsResolved)
            throw new InvalidOperationException("Only resolved comments can be reopened.");

        IsResolved = false;
        ResolvedDate = null;
        ResolvedBy = string.Empty;
        
        Content += $"\n\n[REOPENED by {reopenedBy}]: {reason}";
    }

    public void SetIndonesianComplianceContext(
        bool isComplianceNote,
        string regulatoryContext = "",
        bool isK3Related = false,
        string k3IssueType = "")
    {
        IsComplianceNote = isComplianceNote;
        RegulatoryContext = regulatoryContext;
        IsK3Related = isK3Related;
        K3IssueType = k3IssueType;

        // Compliance and K3 related comments are typically important
        if (isComplianceNote || isK3Related)
        {
            IsImportant = true;
            
            // K3 issues typically require response
            if (isK3Related && !string.IsNullOrEmpty(k3IssueType))
            {
                RequiresResponse = true;
            }
        }
    }

    public void SetFeedbackContext(
        decimal? rating,
        string feedbackCategory = "",
        bool isAnonymous = false)
    {
        RelatedRating = rating;
        FeedbackCategory = feedbackCategory;
        IsAnonymous = isAnonymous;
        
        if (isAnonymous)
        {
            AuthorName = "Anonymous";
            AuthorId = null;
        }
    }

    public void AddAttachment(string attachmentPath, string referencedDocuments = "")
    {
        AttachmentPath = attachmentPath;
        ReferencedDocuments = referencedDocuments;
    }

    public void AddTags(params string[] tags)
    {
        var existingTags = string.IsNullOrEmpty(Tags) 
            ? new List<string>() 
            : Tags.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(t => t.Trim()).ToList();
        
        foreach (var tag in tags)
        {
            if (!existingTags.Contains(tag.Trim(), StringComparer.OrdinalIgnoreCase))
            {
                existingTags.Add(tag.Trim());
            }
        }
        
        Tags = string.Join(", ", existingTags);
    }

    public void RequireModeration()
    {
        IsModerated = true;
        IsApproved = false; // Pending approval
    }

    public void ApproveAfterModeration(string moderatedBy, string moderationNotes = "")
    {
        if (!IsModerated)
            throw new InvalidOperationException("Only moderated comments can be approved.");

        IsApproved = true;
        ModeratedBy = moderatedBy;
        ModerationDate = DateTime.UtcNow;
        ModerationNotes = moderationNotes;
    }

    public void RejectAfterModeration(string moderatedBy, string rejectionReason)
    {
        if (!IsModerated)
            throw new InvalidOperationException("Only moderated comments can be rejected.");

        IsApproved = false;
        ModeratedBy = moderatedBy;
        ModerationDate = DateTime.UtcNow;
        ModerationNotes = rejectionReason;
    }

    public void Pin(string pinnedBy)
    {
        IsPinned = true;
        PinnedDate = DateTime.UtcNow;
        PinnedBy = pinnedBy;
    }

    public void Unpin()
    {
        IsPinned = false;
        PinnedDate = null;
        PinnedBy = string.Empty;
    }

    public void IncrementLikes()
    {
        LikeCount++;
    }

    public void DecrementLikes()
    {
        if (LikeCount > 0)
        {
            LikeCount--;
        }
    }

    public void IncrementReplyCount()
    {
        if (!IsReply)
        {
            ReplyCount++;
        }
    }

    public void DecrementReplyCount()
    {
        if (!IsReply && ReplyCount > 0)
        {
            ReplyCount--;
        }
    }

    public bool CanBeViewedBy(string userRole, bool isInstructor, bool isAuthor, bool isParticipant)
    {
        if (!IsApproved)
            return isInstructor || isAuthor; // Only instructors and author can see unapproved comments

        if (IsPrivateNote)
            return isAuthor || isInstructor; // Only author and instructors can see private notes

        if (IsInstructorOnly)
            return isInstructor;

        if (IsPublic)
            return true;

        // Default: visible to instructors and participants
        return isInstructor || isParticipant;
    }

    public bool CanBeEditedBy(bool isAuthor, bool isInstructor, bool isAdmin)
    {
        if (IsSystemGenerated)
            return false; // System comments cannot be edited

        if (isAdmin)
            return true; // Admins can edit any comment

        if (isAuthor)
            return true; // Authors can edit their own comments

        if (isInstructor && (CommentType == TrainingCommentType.InstructorNote || IsComplianceNote))
            return true; // Instructors can edit instructor notes and compliance notes

        return false;
    }

    public string GetDisplayAuthor()
    {
        if (IsAnonymous)
            return "Anonymous";

        if (IsSystemGenerated)
            return "System";

        return string.IsNullOrEmpty(AuthorRole) ? AuthorName : $"{AuthorName} ({AuthorRole})";
    }

    public List<string> GetTagsList()
    {
        if (string.IsNullOrEmpty(Tags))
            return new List<string>();

        return Tags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                  .Select(t => t.Trim())
                  .ToList();
    }

    public string GetCommentTypeDescription()
    {
        return CommentType switch
        {
            TrainingCommentType.General => "General Comment",
            TrainingCommentType.Feedback => "Feedback",
            TrainingCommentType.Issue => "Issue/Concern",
            TrainingCommentType.Improvement => "Improvement Suggestion",
            TrainingCommentType.Clarification => "Clarification Request",
            TrainingCommentType.AdminNote => "Administrative Note",
            TrainingCommentType.InstructorNote => "Instructor Note",
            TrainingCommentType.ParticipantFeedback => "Participant Feedback",
            TrainingCommentType.AssessmentComment => "Assessment Comment",
            TrainingCommentType.ComplianceNote => "Compliance Note",
            _ => CommentType.ToString()
        };
    }
}